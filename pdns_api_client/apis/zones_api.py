# coding: utf-8

"""
    PowerDNS Authoritative HTTP API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 0.0.12
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class ZonesApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def axfr_export_zone(self, server_id, zone_id, **kwargs):
        """
        Returns the zone in AXFR format.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.axfr_export_zone(server_id, zone_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str server_id: The id of the server to retrieve (required)
        :param str zone_id: The id of the zone to retrieve (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.axfr_export_zone_with_http_info(server_id, zone_id, **kwargs)
        else:
            (data) = self.axfr_export_zone_with_http_info(server_id, zone_id, **kwargs)
            return data

    def axfr_export_zone_with_http_info(self, server_id, zone_id, **kwargs):
        """
        Returns the zone in AXFR format.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.axfr_export_zone_with_http_info(server_id, zone_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str server_id: The id of the server to retrieve (required)
        :param str zone_id: The id of the zone to retrieve (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['server_id', 'zone_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method axfr_export_zone" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'server_id' is set
        if ('server_id' not in params) or (params['server_id'] is None):
            raise ValueError("Missing the required parameter `server_id` when calling `axfr_export_zone`")
        # verify the required parameter 'zone_id' is set
        if ('zone_id' not in params) or (params['zone_id'] is None):
            raise ValueError("Missing the required parameter `zone_id` when calling `axfr_export_zone`")


        collection_formats = {}

        path_params = {}
        if 'server_id' in params:
            path_params['server_id'] = params['server_id']
        if 'zone_id' in params:
            path_params['zone_id'] = params['zone_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['APIKeyHeader']

        return self.api_client.call_api('/servers/{server_id}/zones/{zone_id}/export', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='str',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def axfr_retrieve_zone(self, server_id, zone_id, **kwargs):
        """
        Send a DNS NOTIFY to all slaves.
        Fails when zone kind is not Master or Slave, or master and slave are disabled in the configuration. Only works for Slave if renotify is on. Clients MUST NOT send a body.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.axfr_retrieve_zone(server_id, zone_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str server_id: The id of the server to retrieve (required)
        :param str zone_id: The id of the zone to retrieve (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.axfr_retrieve_zone_with_http_info(server_id, zone_id, **kwargs)
        else:
            (data) = self.axfr_retrieve_zone_with_http_info(server_id, zone_id, **kwargs)
            return data

    def axfr_retrieve_zone_with_http_info(self, server_id, zone_id, **kwargs):
        """
        Send a DNS NOTIFY to all slaves.
        Fails when zone kind is not Master or Slave, or master and slave are disabled in the configuration. Only works for Slave if renotify is on. Clients MUST NOT send a body.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.axfr_retrieve_zone_with_http_info(server_id, zone_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str server_id: The id of the server to retrieve (required)
        :param str zone_id: The id of the zone to retrieve (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['server_id', 'zone_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method axfr_retrieve_zone" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'server_id' is set
        if ('server_id' not in params) or (params['server_id'] is None):
            raise ValueError("Missing the required parameter `server_id` when calling `axfr_retrieve_zone`")
        # verify the required parameter 'zone_id' is set
        if ('zone_id' not in params) or (params['zone_id'] is None):
            raise ValueError("Missing the required parameter `zone_id` when calling `axfr_retrieve_zone`")


        collection_formats = {}

        path_params = {}
        if 'server_id' in params:
            path_params['server_id'] = params['server_id']
        if 'zone_id' in params:
            path_params['zone_id'] = params['zone_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['APIKeyHeader']

        return self.api_client.call_api('/servers/{server_id}/zones/{zone_id}/axfr-retrieve', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def check_zone(self, server_id, zone_id, **kwargs):
        """
        Verify zone contents/configuration.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.check_zone(server_id, zone_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str server_id: The id of the server to retrieve (required)
        :param str zone_id: The id of the zone to retrieve (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.check_zone_with_http_info(server_id, zone_id, **kwargs)
        else:
            (data) = self.check_zone_with_http_info(server_id, zone_id, **kwargs)
            return data

    def check_zone_with_http_info(self, server_id, zone_id, **kwargs):
        """
        Verify zone contents/configuration.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.check_zone_with_http_info(server_id, zone_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str server_id: The id of the server to retrieve (required)
        :param str zone_id: The id of the zone to retrieve (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['server_id', 'zone_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method check_zone" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'server_id' is set
        if ('server_id' not in params) or (params['server_id'] is None):
            raise ValueError("Missing the required parameter `server_id` when calling `check_zone`")
        # verify the required parameter 'zone_id' is set
        if ('zone_id' not in params) or (params['zone_id'] is None):
            raise ValueError("Missing the required parameter `zone_id` when calling `check_zone`")


        collection_formats = {}

        path_params = {}
        if 'server_id' in params:
            path_params['server_id'] = params['server_id']
        if 'zone_id' in params:
            path_params['zone_id'] = params['zone_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['APIKeyHeader']

        return self.api_client.call_api('/servers/{server_id}/zones/{zone_id}/check', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='str',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def create_zone(self, server_id, **kwargs):
        """
        Creates a new domain, returns the Zone on creation.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_zone(server_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str server_id: The id of the server to retrieve (required)
        :param bool rrsets: “true” (default) or “false”, whether to include the “rrsets” in the response Zone object.
        :return: Zone
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_zone_with_http_info(server_id, **kwargs)
        else:
            (data) = self.create_zone_with_http_info(server_id, **kwargs)
            return data

    def create_zone_with_http_info(self, server_id, **kwargs):
        """
        Creates a new domain, returns the Zone on creation.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_zone_with_http_info(server_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str server_id: The id of the server to retrieve (required)
        :param bool rrsets: “true” (default) or “false”, whether to include the “rrsets” in the response Zone object.
        :return: Zone
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['server_id', 'rrsets']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_zone" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'server_id' is set
        if ('server_id' not in params) or (params['server_id'] is None):
            raise ValueError("Missing the required parameter `server_id` when calling `create_zone`")


        collection_formats = {}

        path_params = {}
        if 'server_id' in params:
            path_params['server_id'] = params['server_id']

        query_params = []
        if 'rrsets' in params:
            query_params.append(('rrsets', params['rrsets']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['APIKeyHeader']

        return self.api_client.call_api('/servers/{server_id}/zones', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Zone',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_zone(self, server_id, zone_id, **kwargs):
        """
        Deletes this zone, all attached metadata and rrsets.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_zone(server_id, zone_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str server_id: The id of the server to retrieve (required)
        :param str zone_id: The id of the zone to retrieve (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_zone_with_http_info(server_id, zone_id, **kwargs)
        else:
            (data) = self.delete_zone_with_http_info(server_id, zone_id, **kwargs)
            return data

    def delete_zone_with_http_info(self, server_id, zone_id, **kwargs):
        """
        Deletes this zone, all attached metadata and rrsets.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_zone_with_http_info(server_id, zone_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str server_id: The id of the server to retrieve (required)
        :param str zone_id: The id of the zone to retrieve (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['server_id', 'zone_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_zone" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'server_id' is set
        if ('server_id' not in params) or (params['server_id'] is None):
            raise ValueError("Missing the required parameter `server_id` when calling `delete_zone`")
        # verify the required parameter 'zone_id' is set
        if ('zone_id' not in params) or (params['zone_id'] is None):
            raise ValueError("Missing the required parameter `zone_id` when calling `delete_zone`")


        collection_formats = {}

        path_params = {}
        if 'server_id' in params:
            path_params['server_id'] = params['server_id']
        if 'zone_id' in params:
            path_params['zone_id'] = params['zone_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['APIKeyHeader']

        return self.api_client.call_api('/servers/{server_id}/zones/{zone_id}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def list_zone(self, server_id, zone_id, **kwargs):
        """
        zone managed by a server
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_zone(server_id, zone_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str server_id: The id of the server to retrieve (required)
        :param str zone_id: The id of the zone to retrieve (required)
        :return: Zone
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.list_zone_with_http_info(server_id, zone_id, **kwargs)
        else:
            (data) = self.list_zone_with_http_info(server_id, zone_id, **kwargs)
            return data

    def list_zone_with_http_info(self, server_id, zone_id, **kwargs):
        """
        zone managed by a server
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_zone_with_http_info(server_id, zone_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str server_id: The id of the server to retrieve (required)
        :param str zone_id: The id of the zone to retrieve (required)
        :return: Zone
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['server_id', 'zone_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_zone" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'server_id' is set
        if ('server_id' not in params) or (params['server_id'] is None):
            raise ValueError("Missing the required parameter `server_id` when calling `list_zone`")
        # verify the required parameter 'zone_id' is set
        if ('zone_id' not in params) or (params['zone_id'] is None):
            raise ValueError("Missing the required parameter `zone_id` when calling `list_zone`")


        collection_formats = {}

        path_params = {}
        if 'server_id' in params:
            path_params['server_id'] = params['server_id']
        if 'zone_id' in params:
            path_params['zone_id'] = params['zone_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['APIKeyHeader']

        return self.api_client.call_api('/servers/{server_id}/zones/{zone_id}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Zone',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def list_zones(self, server_id, **kwargs):
        """
        List all Zones in a server
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_zones(server_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str server_id: The id of the server to retrieve (required)
        :return: list[Zone]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.list_zones_with_http_info(server_id, **kwargs)
        else:
            (data) = self.list_zones_with_http_info(server_id, **kwargs)
            return data

    def list_zones_with_http_info(self, server_id, **kwargs):
        """
        List all Zones in a server
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_zones_with_http_info(server_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str server_id: The id of the server to retrieve (required)
        :return: list[Zone]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['server_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_zones" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'server_id' is set
        if ('server_id' not in params) or (params['server_id'] is None):
            raise ValueError("Missing the required parameter `server_id` when calling `list_zones`")


        collection_formats = {}

        path_params = {}
        if 'server_id' in params:
            path_params['server_id'] = params['server_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['APIKeyHeader']

        return self.api_client.call_api('/servers/{server_id}/zones', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[Zone]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def notify_zone(self, server_id, zone_id, **kwargs):
        """
        Send a DNS NOTIFY to all slaves.
        Fails when zone kind is not Master or Slave, or master and slave are disabled in the configuration. Only works for Slave if renotify is on. Clients MUST NOT send a body.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.notify_zone(server_id, zone_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str server_id: The id of the server to retrieve (required)
        :param str zone_id: The id of the zone to retrieve (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.notify_zone_with_http_info(server_id, zone_id, **kwargs)
        else:
            (data) = self.notify_zone_with_http_info(server_id, zone_id, **kwargs)
            return data

    def notify_zone_with_http_info(self, server_id, zone_id, **kwargs):
        """
        Send a DNS NOTIFY to all slaves.
        Fails when zone kind is not Master or Slave, or master and slave are disabled in the configuration. Only works for Slave if renotify is on. Clients MUST NOT send a body.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.notify_zone_with_http_info(server_id, zone_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str server_id: The id of the server to retrieve (required)
        :param str zone_id: The id of the zone to retrieve (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['server_id', 'zone_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method notify_zone" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'server_id' is set
        if ('server_id' not in params) or (params['server_id'] is None):
            raise ValueError("Missing the required parameter `server_id` when calling `notify_zone`")
        # verify the required parameter 'zone_id' is set
        if ('zone_id' not in params) or (params['zone_id'] is None):
            raise ValueError("Missing the required parameter `zone_id` when calling `notify_zone`")


        collection_formats = {}

        path_params = {}
        if 'server_id' in params:
            path_params['server_id'] = params['server_id']
        if 'zone_id' in params:
            path_params['zone_id'] = params['zone_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['APIKeyHeader']

        return self.api_client.call_api('/servers/{server_id}/zones/{zone_id}/notify', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def patch_zone(self, server_id, zone_id, zone_struct, **kwargs):
        """
        Modifies present RRsets and comments. Returns 204 No Content on success.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.patch_zone(server_id, zone_id, zone_struct, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str server_id: The id of the server to retrieve (required)
        :param str zone_id: (required)
        :param Zone zone_struct: The zone struct to patch with (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.patch_zone_with_http_info(server_id, zone_id, zone_struct, **kwargs)
        else:
            (data) = self.patch_zone_with_http_info(server_id, zone_id, zone_struct, **kwargs)
            return data

    def patch_zone_with_http_info(self, server_id, zone_id, zone_struct, **kwargs):
        """
        Modifies present RRsets and comments. Returns 204 No Content on success.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.patch_zone_with_http_info(server_id, zone_id, zone_struct, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str server_id: The id of the server to retrieve (required)
        :param str zone_id: (required)
        :param Zone zone_struct: The zone struct to patch with (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['server_id', 'zone_id', 'zone_struct']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_zone" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'server_id' is set
        if ('server_id' not in params) or (params['server_id'] is None):
            raise ValueError("Missing the required parameter `server_id` when calling `patch_zone`")
        # verify the required parameter 'zone_id' is set
        if ('zone_id' not in params) or (params['zone_id'] is None):
            raise ValueError("Missing the required parameter `zone_id` when calling `patch_zone`")
        # verify the required parameter 'zone_struct' is set
        if ('zone_struct' not in params) or (params['zone_struct'] is None):
            raise ValueError("Missing the required parameter `zone_struct` when calling `patch_zone`")


        collection_formats = {}

        path_params = {}
        if 'server_id' in params:
            path_params['server_id'] = params['server_id']
        if 'zone_id' in params:
            path_params['zone_id'] = params['zone_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'zone_struct' in params:
            body_params = params['zone_struct']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['APIKeyHeader']

        return self.api_client.call_api('/servers/{server_id}/zones/{zone_id}', 'PATCH',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def put_zone(self, server_id, zone_id, zone_struct, **kwargs):
        """
        Modifies basic zone data (metadata).
        Allowed fields in client body: all except id, url and name. Returns 204 No Content on success.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.put_zone(server_id, zone_id, zone_struct, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str server_id: The id of the server to retrieve (required)
        :param str zone_id: (required)
        :param Zone zone_struct: The zone struct to patch with (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.put_zone_with_http_info(server_id, zone_id, zone_struct, **kwargs)
        else:
            (data) = self.put_zone_with_http_info(server_id, zone_id, zone_struct, **kwargs)
            return data

    def put_zone_with_http_info(self, server_id, zone_id, zone_struct, **kwargs):
        """
        Modifies basic zone data (metadata).
        Allowed fields in client body: all except id, url and name. Returns 204 No Content on success.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.put_zone_with_http_info(server_id, zone_id, zone_struct, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str server_id: The id of the server to retrieve (required)
        :param str zone_id: (required)
        :param Zone zone_struct: The zone struct to patch with (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['server_id', 'zone_id', 'zone_struct']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_zone" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'server_id' is set
        if ('server_id' not in params) or (params['server_id'] is None):
            raise ValueError("Missing the required parameter `server_id` when calling `put_zone`")
        # verify the required parameter 'zone_id' is set
        if ('zone_id' not in params) or (params['zone_id'] is None):
            raise ValueError("Missing the required parameter `zone_id` when calling `put_zone`")
        # verify the required parameter 'zone_struct' is set
        if ('zone_struct' not in params) or (params['zone_struct'] is None):
            raise ValueError("Missing the required parameter `zone_struct` when calling `put_zone`")


        collection_formats = {}

        path_params = {}
        if 'server_id' in params:
            path_params['server_id'] = params['server_id']
        if 'zone_id' in params:
            path_params['zone_id'] = params['zone_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'zone_struct' in params:
            body_params = params['zone_struct']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['APIKeyHeader']

        return self.api_client.call_api('/servers/{server_id}/zones/{zone_id}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def rectify_zone(self, server_id, zone_id, **kwargs):
        """
        Rectify the zone data.
        This does not take into account the API-RECTIFY metadata. Fails on slave zones and zones that do not have DNSSEC.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.rectify_zone(server_id, zone_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str server_id: The id of the server to retrieve (required)
        :param str zone_id: The id of the zone to retrieve (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.rectify_zone_with_http_info(server_id, zone_id, **kwargs)
        else:
            (data) = self.rectify_zone_with_http_info(server_id, zone_id, **kwargs)
            return data

    def rectify_zone_with_http_info(self, server_id, zone_id, **kwargs):
        """
        Rectify the zone data.
        This does not take into account the API-RECTIFY metadata. Fails on slave zones and zones that do not have DNSSEC.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.rectify_zone_with_http_info(server_id, zone_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str server_id: The id of the server to retrieve (required)
        :param str zone_id: The id of the zone to retrieve (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['server_id', 'zone_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rectify_zone" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'server_id' is set
        if ('server_id' not in params) or (params['server_id'] is None):
            raise ValueError("Missing the required parameter `server_id` when calling `rectify_zone`")
        # verify the required parameter 'zone_id' is set
        if ('zone_id' not in params) or (params['zone_id'] is None):
            raise ValueError("Missing the required parameter `zone_id` when calling `rectify_zone`")


        collection_formats = {}

        path_params = {}
        if 'server_id' in params:
            path_params['server_id'] = params['server_id']
        if 'zone_id' in params:
            path_params['zone_id'] = params['zone_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['APIKeyHeader']

        return self.api_client.call_api('/servers/{server_id}/zones/{zone_id}/rectify', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='str',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
