# coding: utf-8

"""
    PowerDNS Authoritative HTTP API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 0.0.10
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class ZonemetadataApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def create_zone_metadata(self, server_id, zone_id, metadata, **kwargs):
        """
        Creates a set of metadata entries
        Creates a set of metadata entries of given kind for the zone. Existing metadata entries for the zone with the same kind are not overwritten.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_zone_metadata(server_id, zone_id, metadata, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str server_id: The id of the server to retrieve (required)
        :param str zone_id: (required)
        :param list[Metadata] metadata: List of metadata to add/create (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_zone_metadata_with_http_info(server_id, zone_id, metadata, **kwargs)
        else:
            (data) = self.create_zone_metadata_with_http_info(server_id, zone_id, metadata, **kwargs)
            return data

    def create_zone_metadata_with_http_info(self, server_id, zone_id, metadata, **kwargs):
        """
        Creates a set of metadata entries
        Creates a set of metadata entries of given kind for the zone. Existing metadata entries for the zone with the same kind are not overwritten.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_zone_metadata_with_http_info(server_id, zone_id, metadata, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str server_id: The id of the server to retrieve (required)
        :param str zone_id: (required)
        :param list[Metadata] metadata: List of metadata to add/create (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['server_id', 'zone_id', 'metadata']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_zone_metadata" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'server_id' is set
        if ('server_id' not in params) or (params['server_id'] is None):
            raise ValueError("Missing the required parameter `server_id` when calling `create_zone_metadata`")
        # verify the required parameter 'zone_id' is set
        if ('zone_id' not in params) or (params['zone_id'] is None):
            raise ValueError("Missing the required parameter `zone_id` when calling `create_zone_metadata`")
        # verify the required parameter 'metadata' is set
        if ('metadata' not in params) or (params['metadata'] is None):
            raise ValueError("Missing the required parameter `metadata` when calling `create_zone_metadata`")


        collection_formats = {}

        path_params = {}
        if 'server_id' in params:
            path_params['server_id'] = params['server_id']
        if 'zone_id' in params:
            path_params['zone_id'] = params['zone_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'metadata' in params:
            body_params = params['metadata']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['APIKeyHeader']

        return self.api_client.call_api('/servers/{server_id}/zones/{zone_id}/metadata', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_zone_metadata_kind(self, server_id, zone_id, metadata_kind, **kwargs):
        """
        Delete all items of a single kind of domain metadata.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_zone_metadata_kind(server_id, zone_id, metadata_kind, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str server_id: The id of the server to retrieve (required)
        :param str zone_id: The id of the zone to retrieve (required)
        :param str metadata_kind: ??? (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_zone_metadata_kind_with_http_info(server_id, zone_id, metadata_kind, **kwargs)
        else:
            (data) = self.delete_zone_metadata_kind_with_http_info(server_id, zone_id, metadata_kind, **kwargs)
            return data

    def delete_zone_metadata_kind_with_http_info(self, server_id, zone_id, metadata_kind, **kwargs):
        """
        Delete all items of a single kind of domain metadata.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_zone_metadata_kind_with_http_info(server_id, zone_id, metadata_kind, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str server_id: The id of the server to retrieve (required)
        :param str zone_id: The id of the zone to retrieve (required)
        :param str metadata_kind: ??? (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['server_id', 'zone_id', 'metadata_kind']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_zone_metadata_kind" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'server_id' is set
        if ('server_id' not in params) or (params['server_id'] is None):
            raise ValueError("Missing the required parameter `server_id` when calling `delete_zone_metadata_kind`")
        # verify the required parameter 'zone_id' is set
        if ('zone_id' not in params) or (params['zone_id'] is None):
            raise ValueError("Missing the required parameter `zone_id` when calling `delete_zone_metadata_kind`")
        # verify the required parameter 'metadata_kind' is set
        if ('metadata_kind' not in params) or (params['metadata_kind'] is None):
            raise ValueError("Missing the required parameter `metadata_kind` when calling `delete_zone_metadata_kind`")


        collection_formats = {}

        path_params = {}
        if 'server_id' in params:
            path_params['server_id'] = params['server_id']
        if 'zone_id' in params:
            path_params['zone_id'] = params['zone_id']
        if 'metadata_kind' in params:
            path_params['metadata_kind'] = params['metadata_kind']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['APIKeyHeader']

        return self.api_client.call_api('/servers/{server_id}/zones/{zone_id}/metadata/{metadata_kind}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def list_zone_metadata(self, server_id, zone_id, **kwargs):
        """
        Get all the MetaData associated with the zone.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_zone_metadata(server_id, zone_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str server_id: The id of the server to retrieve (required)
        :param str zone_id: The id of the zone to retrieve (required)
        :return: list[Metadata]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.list_zone_metadata_with_http_info(server_id, zone_id, **kwargs)
        else:
            (data) = self.list_zone_metadata_with_http_info(server_id, zone_id, **kwargs)
            return data

    def list_zone_metadata_with_http_info(self, server_id, zone_id, **kwargs):
        """
        Get all the MetaData associated with the zone.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_zone_metadata_with_http_info(server_id, zone_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str server_id: The id of the server to retrieve (required)
        :param str zone_id: The id of the zone to retrieve (required)
        :return: list[Metadata]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['server_id', 'zone_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_zone_metadata" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'server_id' is set
        if ('server_id' not in params) or (params['server_id'] is None):
            raise ValueError("Missing the required parameter `server_id` when calling `list_zone_metadata`")
        # verify the required parameter 'zone_id' is set
        if ('zone_id' not in params) or (params['zone_id'] is None):
            raise ValueError("Missing the required parameter `zone_id` when calling `list_zone_metadata`")


        collection_formats = {}

        path_params = {}
        if 'server_id' in params:
            path_params['server_id'] = params['server_id']
        if 'zone_id' in params:
            path_params['zone_id'] = params['zone_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['APIKeyHeader']

        return self.api_client.call_api('/servers/{server_id}/zones/{zone_id}/metadata', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[Metadata]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def list_zone_metadata_kind(self, server_id, zone_id, metadata_kind, **kwargs):
        """
        Get the content of a single kind of domain metadata as a list of MetaData objects.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_zone_metadata_kind(server_id, zone_id, metadata_kind, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str server_id: The id of the server to retrieve (required)
        :param str zone_id: The id of the zone to retrieve (required)
        :param str metadata_kind: ??? (required)
        :return: Metadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.list_zone_metadata_kind_with_http_info(server_id, zone_id, metadata_kind, **kwargs)
        else:
            (data) = self.list_zone_metadata_kind_with_http_info(server_id, zone_id, metadata_kind, **kwargs)
            return data

    def list_zone_metadata_kind_with_http_info(self, server_id, zone_id, metadata_kind, **kwargs):
        """
        Get the content of a single kind of domain metadata as a list of MetaData objects.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_zone_metadata_kind_with_http_info(server_id, zone_id, metadata_kind, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str server_id: The id of the server to retrieve (required)
        :param str zone_id: The id of the zone to retrieve (required)
        :param str metadata_kind: ??? (required)
        :return: Metadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['server_id', 'zone_id', 'metadata_kind']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_zone_metadata_kind" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'server_id' is set
        if ('server_id' not in params) or (params['server_id'] is None):
            raise ValueError("Missing the required parameter `server_id` when calling `list_zone_metadata_kind`")
        # verify the required parameter 'zone_id' is set
        if ('zone_id' not in params) or (params['zone_id'] is None):
            raise ValueError("Missing the required parameter `zone_id` when calling `list_zone_metadata_kind`")
        # verify the required parameter 'metadata_kind' is set
        if ('metadata_kind' not in params) or (params['metadata_kind'] is None):
            raise ValueError("Missing the required parameter `metadata_kind` when calling `list_zone_metadata_kind`")


        collection_formats = {}

        path_params = {}
        if 'server_id' in params:
            path_params['server_id'] = params['server_id']
        if 'zone_id' in params:
            path_params['zone_id'] = params['zone_id']
        if 'metadata_kind' in params:
            path_params['metadata_kind'] = params['metadata_kind']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['APIKeyHeader']

        return self.api_client.call_api('/servers/{server_id}/zones/{zone_id}/metadata/{metadata_kind}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Metadata',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def modify_zone_metadata_kind(self, server_id, zone_id, metadata_kind, metadata, **kwargs):
        """
        Modify the content of a single kind of domain metadata.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.modify_zone_metadata_kind(server_id, zone_id, metadata_kind, metadata, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str server_id: The id of the server to retrieve (required)
        :param str zone_id: (required)
        :param str metadata_kind: The kind of metadata (required)
        :param Metadata metadata: metadata to add/create (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.modify_zone_metadata_kind_with_http_info(server_id, zone_id, metadata_kind, metadata, **kwargs)
        else:
            (data) = self.modify_zone_metadata_kind_with_http_info(server_id, zone_id, metadata_kind, metadata, **kwargs)
            return data

    def modify_zone_metadata_kind_with_http_info(self, server_id, zone_id, metadata_kind, metadata, **kwargs):
        """
        Modify the content of a single kind of domain metadata.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.modify_zone_metadata_kind_with_http_info(server_id, zone_id, metadata_kind, metadata, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str server_id: The id of the server to retrieve (required)
        :param str zone_id: (required)
        :param str metadata_kind: The kind of metadata (required)
        :param Metadata metadata: metadata to add/create (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['server_id', 'zone_id', 'metadata_kind', 'metadata']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method modify_zone_metadata_kind" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'server_id' is set
        if ('server_id' not in params) or (params['server_id'] is None):
            raise ValueError("Missing the required parameter `server_id` when calling `modify_zone_metadata_kind`")
        # verify the required parameter 'zone_id' is set
        if ('zone_id' not in params) or (params['zone_id'] is None):
            raise ValueError("Missing the required parameter `zone_id` when calling `modify_zone_metadata_kind`")
        # verify the required parameter 'metadata_kind' is set
        if ('metadata_kind' not in params) or (params['metadata_kind'] is None):
            raise ValueError("Missing the required parameter `metadata_kind` when calling `modify_zone_metadata_kind`")
        # verify the required parameter 'metadata' is set
        if ('metadata' not in params) or (params['metadata'] is None):
            raise ValueError("Missing the required parameter `metadata` when calling `modify_zone_metadata_kind`")


        collection_formats = {}

        path_params = {}
        if 'server_id' in params:
            path_params['server_id'] = params['server_id']
        if 'zone_id' in params:
            path_params['zone_id'] = params['zone_id']
        if 'metadata_kind' in params:
            path_params['metadata_kind'] = params['metadata_kind']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'metadata' in params:
            body_params = params['metadata']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['APIKeyHeader']

        return self.api_client.call_api('/servers/{server_id}/zones/{zone_id}/metadata/{metadata_kind}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
