# coding: utf-8

"""
    PowerDNS Authoritative HTTP API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 0.0.12
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Comment(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'content': 'str',
        'account': 'str',
        'modifided_at': 'int'
    }

    attribute_map = {
        'content': 'content',
        'account': 'account',
        'modifided_at': 'modifided_at'
    }

    def __init__(self, content=None, account=None, modifided_at=None):
        """
        Comment - a model defined in Swagger
        """

        self._content = None
        self._account = None
        self._modifided_at = None

        if content is not None:
          self.content = content
        if account is not None:
          self.account = account
        if modifided_at is not None:
          self.modifided_at = modifided_at

    @property
    def content(self):
        """
        Gets the content of this Comment.
        The actual comment

        :return: The content of this Comment.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """
        Sets the content of this Comment.
        The actual comment

        :param content: The content of this Comment.
        :type: str
        """

        self._content = content

    @property
    def account(self):
        """
        Gets the account of this Comment.
        Name of an account that added the comment

        :return: The account of this Comment.
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """
        Sets the account of this Comment.
        Name of an account that added the comment

        :param account: The account of this Comment.
        :type: str
        """

        self._account = account

    @property
    def modifided_at(self):
        """
        Gets the modifided_at of this Comment.
        Timestamp of the last change to the comment

        :return: The modifided_at of this Comment.
        :rtype: int
        """
        return self._modifided_at

    @modifided_at.setter
    def modifided_at(self, modifided_at):
        """
        Sets the modifided_at of this Comment.
        Timestamp of the last change to the comment

        :param modifided_at: The modifided_at of this Comment.
        :type: int
        """

        self._modifided_at = modifided_at

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Comment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
