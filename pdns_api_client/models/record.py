# coding: utf-8

"""
    PowerDNS Authoritative HTTP API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 0.0.11
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Record(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'content': 'str',
        'disabled': 'bool',
        'set_ptr': 'bool'
    }

    attribute_map = {
        'content': 'content',
        'disabled': 'disabled',
        'set_ptr': 'set-ptr'
    }

    def __init__(self, content=None, disabled=None, set_ptr=None):
        """
        Record - a model defined in Swagger
        """

        self._content = None
        self._disabled = None
        self._set_ptr = None

        self.content = content
        self.disabled = disabled
        if set_ptr is not None:
          self.set_ptr = set_ptr

    @property
    def content(self):
        """
        Gets the content of this Record.
        The content of this record

        :return: The content of this Record.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """
        Sets the content of this Record.
        The content of this record

        :param content: The content of this Record.
        :type: str
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")

        self._content = content

    @property
    def disabled(self):
        """
        Gets the disabled of this Record.
        Whether or not this record is disabled

        :return: The disabled of this Record.
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """
        Sets the disabled of this Record.
        Whether or not this record is disabled

        :param disabled: The disabled of this Record.
        :type: bool
        """
        if disabled is None:
            raise ValueError("Invalid value for `disabled`, must not be `None`")

        self._disabled = disabled

    @property
    def set_ptr(self):
        """
        Gets the set_ptr of this Record.
        If set to true, the server will find the matching reverse zone and create a PTR there. Existing PTR records are replaced. If no matching reverse Zone, an error is thrown. Only valid in client bodies, only valid for A and AAAA types. Not returned by the server.

        :return: The set_ptr of this Record.
        :rtype: bool
        """
        return self._set_ptr

    @set_ptr.setter
    def set_ptr(self, set_ptr):
        """
        Sets the set_ptr of this Record.
        If set to true, the server will find the matching reverse zone and create a PTR there. Existing PTR records are replaced. If no matching reverse Zone, an error is thrown. Only valid in client bodies, only valid for A and AAAA types. Not returned by the server.

        :param set_ptr: The set_ptr of this Record.
        :type: bool
        """

        self._set_ptr = set_ptr

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Record):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
